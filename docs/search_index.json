[["index.html", "A Minimal Introduction to Data Management 1 Overview 1.1 General 1.2 Lectures/Discussions/Tutorials 1.3 Deliverables", " A Minimal Introduction to Data Management Jasper Slingsby 2022-03-31 1 Overview This is a minimal introduction to data management handling data in R compiled for the Biological Sciences BSc(Honours) class at the University of Cape Town. 1.1 General I provide a very brief introduction to data management. We only have a week, so this really is a minimalist introduction. I’ll focus on providing a broad overview of the general framework and motivation for good data management (and reproducible research), teaching a few practical skills along the way. Mostly this is not fun and exciting, but it is important stuff for any biologist to know. I’ll try my best to make it interesting! Hopefully by the end of the module you’ll see the value in it all - both for you as an individual and for science and society in general. The core outcomes/concepts I hope you’ll come away with: Familiarity with the concepts and understand the need for Open, Reproducible Science Familiarity with The Data Life Cycle Some data management and handling skills 1.2 Lectures/Discussions/Tutorials These will be held live in person in BIO LT1 from 10AM to 12PM from the 4th to the 7th April unless otherwise announced on Vula. I’ll be adding to (and mostly teaching from) these online course notes as we go along. 1.3 Deliverables "],["intro.html", "2 Introduction", " 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2021) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],["literature.html", "3 Literature", " 3 Literature Here is a review of existing methods. "],["reproducibility.html", "4 Reproducible research 4.1 The Reproducibility Crisis 4.2 Replication and the Reproducibility Spectrum 4.3 Why work reproducibly? 4.4 Barriers to working reproducibly 4.5 Reproducible Scientific Workflows", " 4 Reproducible research 4.1 The Reproducibility Crisis “Replication is the ultimate standard by which scientific claims are judged.” (Peng 2011) Replication is one of the fundamental tenets of science and if the results of a study or experiment cannot by replicated by an independent set of investigators then whatever scientific claims were made should be treated with caution! At best, it suggests that evidence for the claim is weak or mixed, or specific to particular ecosystems or other circumstances and cannot be generalized. At worst, there was error (or even dishonesty) in the original study and the claims were plainly false. In other words, published research should be robust enough and the methods described in enough detail that anyone else should be able to repeat the study (using the publication only) and find similar results. Sadly, this is rarely the case!!! Figure 4.1: ‘Is there a reproducibility* crisis?’ Results from a survey of &gt;1500 top scientists (Baker 2016; Penny 2016). *Note that they did not discern between reproducibility and replicability, and that the terms are often used interchangeably. We have a problem… Since we’re failing the gentleman’s agreement1 that we’ll describe our methods in enough detail that anyone else should be able to repeat the study (using the publication only) and find similar results, modern scientists are trying to formalize the process in the form of Reproducible Research. Reproducible research makes use of modern software tools to share data, code and other resources required to allow others to reproduce the same result as the original study, thus making all analyses open and transparent. Working reproducibly is not just a requirement for using quantitative approaches in iterative decision-making, it is central to scientific progress!!! 4.2 Replication and the Reproducibility Spectrum While full replication is a huge challenge (and sometimes impossible) to achieve, it is something all scientists should be working towards. Understandably, some studies may not be entirely replicable purely due to the nature of the data or phenomenon (e.g. rare phenomena, long term records, loss of species or ecosystems, or very expensive once-off science projects like space missions). In these cases the “gold standard” of full replication (from new data collection to results) cannot be achieved, and we have to settle for a lower rung on the reproducibility spectrum (Figure 4.2). Figure 4.2: The Reproducibility Spectrum (Peng 2011). Reproducibility falls short of full replication because it focuses on reproducing the same result from the same data set, rather than analyzing independently collected data. While this may seem trivial, you’d be surprised at how few studies are even reproducible, let alone replicable. 4.3 Why work reproducibly? Figure 4.3: Let’s start being more specific about our miracles… Cartoon © Sidney Harris. Used with permission ScienceCartoonsPlus.com In addition to basic scientific rigour, working reproducibly is hugely valuable, because: (Adapted from “Five selfish reasons to work reproducibly” (Markowetz 2015)) Its transparent and open, helping us avoid mistakes and/or track down errors in analyses This is what highlighted the importance of working reproducibly for me. In 2017 I published the first evidence of observed climate change impacts on biodiversity in the Fynbos Biome (Slingsby et al. 2017). The analyses were quite complicated, and when working on the revisions I found an error in my R code. Fortunately, it didn’t change the results qualitatively, but it made me realize how easy it is to make a mistake and potentially put the wrong message out there! This encouraged me to make all data and R code from the paper available, so that anyone is free to check my data and analyses and let me (and/or the world) know if they find any errors. It makes it easier to write papers e.g. Dynamic documents like RMarkdown or Jupyter Notebooks update automatically when you change your analyses, so you don’t have to copy/paste or save/insert all tables and figures - or worry about whether you included the latest versions. It helps the review process Often issues picked at by reviewers are matters of clarity/confusion. Sharing your data and analyses allows them to see exactly what you did, not just what you said you did, allowing them to identify the problem and make constructive suggestions. It’s also handy to be able to respond to a reviewer’s comment with something like: “That’s a great suggestion, but not really in line with the objectives of the study. We have chosen not to include the suggested analysis, but do provide all data and code so that interested readers can explore this for themselves.” (Feel free to copy and paste - CCO 1.0) It enables continuity of the research When people leave a project (e.g. students/postdocs), or you forget what you did X days/weeks/months/years ago, it can be a serious setback for a project and make it difficult for you or a new student to pick up where things left off. If the data and workflow are well curated and documented this problem is avoided. Trust me, this is a very common problem!!! I have many papers that I (or my students) never published and may never go back to, because I know it’ll take me a few days or weeks to understand the datasets and analyses again… This is obviously incredibly important for long-term projects! A little bit of extra effort early on can save a lot of time further down the road!!! It helps to build your reputation Working reproducibly makes it clear you’re an honest, open, careful and transparent researcher, and should errors be found in your work you’re unlikely to be accused of dishonesty (e.g. see my paper example under point 1 - although no one has told me of any errors yet…). When others reuse your data, code, etc you’re likely to get credit for it - either just informally, or formally through citations or acknowledgements (depending on the licensing conditions you specify - see “Preserve” in the Data Life Cycle). And some less selfish reasons (and relevant for ecoforecasting): It speeds progress in science by allowing you (or others) to rapidly build on previous findings and analyses Somewhat linked to point 4, but here the focus is on building on published work. For example, if I read a paper and have an idea (or develop a new hypothesis) that may explain some of their results or add to the story, I can start from where they left off rather than collecting new data, recoding their whole analysis, etc before I can even start. It allows easy comparison of new analytical approaches (methods, models, etc) to older ones Linked to 6, but more specific to model or methods development where the need to “benchmark” your new method relative to an older one is important. If the benchmark model exists you can make an honest comparison, but if you have to set up the older one yourself, some may accuse you of gaming the system by chosing settings etc that advantage your new method. It makes it easy to repeat the same analyses when new data are collected or added This is key for iterative forecasting, but also useful if you want to apply the same method/model to a new data set (e.g. applying Merow et al. (2014)’s analysis on all 26 Proteaceae studied by Treurnicht et al. (2016)). Most skills and software used in Reproducible Research are very useful beyond Reproducible Research alone! e.g. GitHub - in addition to versioning code etc is great for code management, collaborative projects and can be used for all kinds of things like building websites (e.g. these course notes). And one more selfish reason (but don’t tell anyone I said this): Reproducible research skills are highly sought after in careers like data science etc… Skills are important should you decide to leave biology… Even withing biology, more and more environmental organizations and NGOs are hiring data scientists or scientists with strong data and quantitative skills. Some examples I know of: The South African Environmental Observation Network (SAEON - especially their data node uLwazi) The Endangered Wildlife Trust (EWT) The Nature Conservancy 4.4 Barriers to working reproducibly (Adapted from “A Beginner’s Guide to Conducting Reproducible Research” (Alston and Rick 2021)) 1. Complexity There can be a bit of a learning curve in getting to know and use the tools for reproducible research effectively. One is always tempted by the “easy option” of doing it the way you already know or using “user-friendly” proprietary software. 2. Technological change Hardware and software used in analyses change over time - either changing with updates or going obsolete altogether - making it very difficult to rerun old analyses. This should be less of a problem going forward because: it is something people are now aware of (so we’re working on solutions) we’re increasingly using open source software, for which older versions are usually still made available and there is little risk of it disappearing when the software company stops supporting the software or goes bankrupt documenting hardware and software versions with analyses is an easy baseline increasingly people are using contained computing environments as we’ll discuss below 3. Human error Simple mistakes or failure to fully document protocols or analyses can easily make a study irreproducible. Most reproducible research tools are aimed at solving this problem. 4. Intellectual property rights Rational self-interest can lead to hesitation to share data and code via many pathways: Fear of not getting credit; Concern that the materials shared will be used incorrectly or unethically; etc Hopefully most of these issues will be solved by better awareness of licensing issues, attribution, etc, as the culture of reproducible research grows 4.5 Reproducible Scientific Workflows Figure 4.4: ‘Data Pipeline’ from xkcd.com/2054, used under a CC-BY-NC 2.5 license. Working reproducibly requires careful planning and documentation of each step in your scientific workflow from planning your data collection to sharing your results. This entails a number of overlapping/intertwined components, namely: Data management - which we’ll spend more time on in Chapter 5 File and folder management Coding and code management - i.e. the data manipulation and analyses performed Computing environment and software Sharing of the data, metadata, code, publications and any other relevant materials For the rest of this section we’ll work through these components and some of the tools that help you achieve this. 4.5.1 File and folder management Project files and folders can get unwieldy fast, and can really bog you down and inhibit productivity when you don’t know where your files are or what the latest version is. Figure 4.5: ‘Documents’ from xkcd.com/1459, used under a CC-BY-NC 2.5 license. The two main considerations for addressing this issue are defining a simple, common, intuitive folder structure, and using informative file names. Folders Most ecological projects have similar requirements. Here’s a screenshot of how I usually (try to) manage my folders. “Code” we’ll deal with in the next section, but obviously contains R code etc to perform analyses. Within “Data” I often have separate folders of “Raw” and “Processed” data. If the data files are big and used across multiple projects (e.g. GIS files), then they’ll often be in a separate folder elsewhere on my computer, but this is well-documented in my code. “Output” contains figures and tables, often in separate folders. I also often have a “Manuscript” folder if I’m working in LaTeX/Sweave or RMarkdown, although this is often in the “Code” folder (since you can embed code in RMarkdown and Sweave documents). File and folder naming Your naming conventions should be: machine readable i.e. avoid spaces and funny punctuation support searching and splitting of names (e.g. “data_raw_CO2.csv,” “data_clean_CO2.csv,” “data_raw_species.csv” can all be searched by keywords and can be split by “_” into 3 useful fields: type (data vs other), class (raw vs clean), variable (CO2 vs species), etc) human readable the contents should be self evident from the file name support sorting i.e. use numeric or character prefixes to separate files into different components or steps (e.g. “data_raw_localities.csv,” “data_clean_localities.csv,” etc) some of this can be handled with folder structure, but you don’t want too many folders either Find out more about file naming here. 4.5.2 Coding and code management Why write code? Working in point-and-click GUI-based software like Excel, Statistica, SPSS, etc may seem easier, but you’ll regret it in the long run… The beauty of writing code lies in: Automation You will inevitably have to adjust and repeat your analysis as you get feedback from supervisors, collaborators and reviewers. Rerunning code is one click, and you’re unlikely to introduce errors. Rerunning analyses in GUI-based software is lots of clicks and it’s easy to make mistakes, alter default settings, etc etc. Next time you need to do the same analysis on a different dataset you can just copy, paste and tweak your code. You code/script provides a record of your analysis Linked to the above, mature scientific coding languages like Python or R allow you to run almost any kind of analysis in one scripted workflow, even if it has diverse components like GIS, phylogenetics, multivariate or Bayesian statistics, etc. Most proprietary software are limited to one or a few specialized areas (e.g. ArcGIS, etc), which leaves you manually exporting and importing data between multiple software packages. This is very cumbersome, in addition to being a file-management nightmare… Most scripting environments are open source (e.g. R, Python, JavaScript, etc) Anyone wanting to use your code doesn’t have to pay for a software license It’s great for transparency - Lots of people can and have checked the background code and functions you’re using, versus only the software owner’s employees have access to the raw code for most analytical software There’s usually a culture of sharing code (online forums, with publications, etc) Here’s a motivation and some tutorials to help you learn R. Some coding rules It’s easy to write messy code. This can make it virtually indecipherable to others (and even yourself), slowing you and your collaborations down. It also makes it easy to make mistakes and not notice them. The overarching rule is to write code for people, not computers. Some basic rules: use consistent, meaningful and distinct names for variables and functions use consistent code and formatting style use commenting to document and explain what you’re doing at each step or in each function - purpose, inputs and outputs “notebooks” like RMarkdown or Jupyter Notebooks are very handy for fulfilling roles like documentation, master/makefiles etc and can be developed into reports or manuscripts write functions rather than repeating the same code modularize code into manageable steps/chunks or even separate them into separate scripts that can all be called in order from a master script or Makefile check for mistakes at every step!!! Beyond errors or warnings, do the outputs make sense? start with a “recipe” that outlines the steps/modules (usually as commented headers etc). This is very valuable for keeping you organized and on track, e.g. a common recipe in R: #Header indicating purpose, author, date, version etc #Define settings #Load required libraries #Read in data #Wrangle/reformat/clean/summarize data as required #Run analyses (often multiple steps) #Wrangle/reformat/summarize analysis outputs for visualization #Visualize outputs as figures or tables avoid proprietary formats i.e. use an open source scripting langauge and open source file formats only use version control!!! Version control Using version control tools like Git, SVN, etc can be challenging at first, but they can also hugely simplify your code development (and adaptation) process. While they were designed by software developers for software development, they are hugely useful for quantitative biology. I can’t speak authoritatively on version control systems (I’ve only ever used Git and GitHub), but here are the advantages as I see them. This version is specific to Git, but I imagine they all have similar functions and functionality: Words in italics are technical terms used within GitHub. You can look them up here. You’ll also cover it in the brief tutorial you’ll do when setting up your computer for the practical. They generally help project management, especially collaborations They allow you to easily share code with collaborators or the public at large - through repositories or gists (code snippets) Users can easily adapt or build on each others’ code by forking repositories and working on their own branch. This is truly powerful!!! It allows you to repeat/replicate analyses but even build websites (like this one!), etc While the whole system is online, you can also work offline by cloning the repository to your local machine. Once you have a local version you can push to or pull from the online repository to keep everything updated Changes are tracked and reversible through commits. If you change the contents of a repository you must commit them and write a commit message before pulling or pushing to the online repository. Each commit is essentially a recoverable version that can be compared or reverted to This is the essence of version control and magically frees you from folders full of lists of files named “mycode_final.R,” “mycode_finalfinal.R,” “myfinalcode_finalfinal.R” etc as per Figure 4.5 They allow collaborators or the public at large to propose changes via pull requests that allow you to merge their forked branch back to the main (or master) branch They allow you to accept and integrate changes seamlessly when you accept and merge pull requests They allow you to keep written record of changes through comments whenever a commit or pull request is made - these also track the user, date, time, etc and are useful for blaming when things go wrong There’s a system for assigning logging and tracking issues and feature requests I’m sure this is all a bit much right now, but should make more sense after the practical… 4.5.3 Computing environment and software We’ve already covered why you should use open source software whenever possible, but it bears repeating. Using proprietary software means that others have to purchase software, licenses, etc to build on your work and essentially makes it not reproducible by putting it behind a pay-wall. This is self-defeating… Another issue is that software and hardware change with upgrades, new versions or changes in the preferences within user communities (e.g. you’ll all know MicroSoft Excel, but have you heard of Quattro Pro or Lotus that were the preferred spreadsheet software of yesteryear?). Just sharing your code, data and workflow does not make your work reproducible if we don’t know what language the code is written in or if functions change or are deprecated in newer versions, breaking your code. The simplest way to avert this problem is to carefully document the hardware and versions of software used in your analyses so that others can recreate that computing environment if needed. This is very easy in R, because you can simply run the sessionInfo() function, like so: sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ## ## locale: ## [1] LC_CTYPE=en_ZA.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_ZA.UTF-8 LC_COLLATE=en_ZA.UTF-8 ## [5] LC_MONETARY=en_ZA.UTF-8 LC_MESSAGES=en_ZA.UTF-8 ## [7] LC_PAPER=en_ZA.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_ZA.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods ## [7] base ## ## other attached packages: ## [1] readxl_1.3.1 forcats_0.5.1 stringr_1.4.0 dplyr_1.0.8 ## [5] purrr_0.3.4 readr_2.1.2 tidyr_1.2.0 tibble_3.1.6 ## [9] ggplot2_3.3.5 tidyverse_1.3.1 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.8.3 lubridate_1.8.0 png_0.1-7 ## [4] assertthat_0.2.1 digest_0.6.29 utf8_1.2.2 ## [7] R6_2.5.1 cellranger_1.1.0 backports_1.4.1 ## [10] reprex_2.0.1 evaluate_0.14 httr_1.4.2 ## [13] highr_0.9 pillar_1.7.0 rlang_1.0.2 ## [16] rstudioapi_0.13 jquerylib_0.1.4 rmarkdown_2.11 ## [19] labeling_0.4.2 munsell_0.5.0 broom_0.7.12 ## [22] compiler_4.1.3 modelr_0.1.8 xfun_0.30 ## [25] pkgconfig_2.0.3 htmltools_0.5.2 tidyselect_1.1.2 ## [28] bookdown_0.24 fansi_1.0.3 crayon_1.5.1 ## [31] tzdb_0.2.0 dbplyr_2.1.1 withr_2.5.0 ## [34] grid_4.1.3 jsonlite_1.8.0 gtable_0.3.0 ## [37] lifecycle_1.0.1 DBI_1.1.2 magrittr_2.0.2 ## [40] scales_1.1.1 cli_3.2.0 stringi_1.7.6 ## [43] farver_2.1.0 fs_1.5.2 xml2_1.3.3 ## [46] bslib_0.3.1 ellipsis_0.3.2 generics_0.1.2 ## [49] vctrs_0.3.8 RColorBrewer_1.1-2 tools_4.1.3 ## [52] glue_1.6.2 jpeg_0.1-9 hms_1.1.1 ## [55] fastmap_1.1.0 yaml_2.3.5 colorspace_2.0-3 ## [58] rvest_1.0.2 knitr_1.37 haven_2.4.3 ## [61] sass_0.4.0 Containers A “better” way to do this is to use containers like docker or singularity. These are contained, lightweight computing environments similar to virtual machines, that you can package with your software/workflow. You set your container up to have everything you need to run your code etc (and nothing extra), so anyone can download (or clone) your container, code and data and run your analyses perfectly first time. 4.5.4 Sharing of the data, code, publication etc This is touched on in more detail when we discuss data management in Chapter 5, but suffice to say there’s no point working reproducibly if you’re not going to share all the components necessary to complete your workflow… Another key component here is that ideally all your data, code, publication etc are shared Open Access - i.e. they are not stuck behind some paywall Figure 4.6: A 3-step, 10-point checklist to guide researchers toward greater reproducibility in their research (Alston and Rick 2021). References "],["data.html", "5 Data Management 5.1 Why do you need to manage your data? 5.2 The Data Life Cycle 5.3 Data and decisions", " 5 Data Management 5.1 Why do you need to manage your data? Data management is often the last thing on a scientists mind when doing a new study - “I have a cool idea, and I’m going to test it!” You don’t want to “waste” time planning how you’re going to manage your data and implementing that plan… Unfortunately, this never ends well and really is a realm where “haste makes waste.” Figure 5.1: The ‘Data Decay Curve’ (Michener et al. 1997) Here are a bunch of reasons you really want to focus on doing good data management: Bad data management leads to data loss… (Figure 5.1) Your future self will hate you if you lose it before you’re finished with it!!! This is less likely in the world of Dropbox, Google Drive, iCloud etc, but I know people who had to repeat their PhD’s because they lost their data because it was on a laptop that crashed or was stolen… Also, beware cloud storage!!! It’s very easy for you or a collaborator to delete/overwrite/lose access to items, e.g.  if someone leaves the project and deletes the folder on their Dropbox without “leaving” it first if the “owner” of the Google Drive folder loses access to their Google account (as will happen to your UCT Google Drive access as soon as you graduate!!!) through all manner of random “accidents” Data has value beyond your current project: to yourself for reuse in future projects, collaborations, etc (i.e. publications and citations), for others for follow-up studies, or combining multiple datasets for meta-analyses or synthesis etc for science on general (especially long-term ecology in a time of global change) We’ve covered this before, but sharing your data is key for transparency and accountability. Data collection is expensive, and is often paid for with taxpayers’ money. You owe it to your funder (and humanity in general) to make sure that science gets the most out of your data in the long term. Lastly, good planning and data management can help iron out issues up front, like: intellectual property, permissions for ethics, collection permits, etc, outlining expectations for who will be authors on the paper(s), responsibilities for managing different aspects of the data etc If you don’t establish these permissions and ground rules early they can result in data loss, not being able to publish the study, damage relationships in collaborations (including student-supervisor), and ultimately damage careers… To avoid data (and relationship) decay, and to reap the benefits of good data management, it is important to consider the full Data Life Cycle. 5.2 The Data Life Cycle Figure 5.2: The Data Life Cycle, adapted from https://www.dataone.org/ Note that there are quite a few different versions of the data life cycle out there. This is the most comprehensive one I know of, and covers all the steps relevant to a range of different kinds of research projects. A full description of this data life cycle and related ecoinformatics issues can be found in (Michener and Jones 2012). Not all projects need to do all steps, nor will they necessarily follow the order here, but it is worth being aware of and considering all steps. For example: Often the first thing you do when you have a new hypothesis is start by searching for any existing data that could be used to test it without having to spend money and time collecting new data (i.e. skip to step 6 - “Discover”). In this case I would argue that you should still do step 1 (Plan), and you’d want to do some checking to assure the quality of the data (step 3), but you can certainly skip steps 2, 4 and 5. A meta-analysis or synthesis paper would probably do the same. If you’re collecting new data you would do steps 1 to 5 and possibly skip 6 and 7, although in my experience few studies do not reuse existing data (e.g. weather or various GIS data to put your new samples into context). 5.2.1 Plan Good data management begins with planning. In this step you essentially outline the plan for every step of the cycle in as much detail as possible. Usually this is done by constructing a document or Data Management Plan (DMP). While developing DMPs can seem tedious, they are essential for the reasons I gave above, and because most funders and universities now require them. Fortunately, there are a number of online data management planning tools that make it easy by providing templates and prompts to ensure that you cover all the bases, like the Digital Curation Centre’s DMPOnline and UCT’s DMP Tool. Figure 5.3: Screenshot of UCT’s Data Management Planning Tool’s Data Management Checklist. A key thing to bear in mind is that a DMP is a living document and should be regularly revised during the life of a project, especially when big changes happen - e.g. new team members, new funding, new direction, change of institution, etc. I typically develop one overarching DMP for an umbrella project (e.g. a particular grant), but then add specifics for subprojects (e.g. separate student projects etc). 5.2.2 Collect and Assure There are many, many different kinds of data that can be collected in a vast number of ways! Figure 5.4: Springer Nature Infographic illustrating the vast range of research data types. While “Collect” and “Assure” are different steps in the life cycle, I advocate that it is foolish to collect data without doing quality assurance and quality control (QA/QC) as you go, irrespective of how you are collecting the data. For example: automated logging instruments (weather stations, cameras, acoustic recorders) need to be checked that they’re logging properly, are calibrated/focused, are reporting sensible values, etc if you’re filling in data sheets, you need to check that all fields have been completed (no gaps), that there are no obvious errors and that any numbers or other values look realistic. In fact, if you’re using handwritten data sheets it’s best to capture them as soon as possible (i.e. that evening), because that helps you spot errors and omissions, you have a better chance of deciphering bad handwriting or cryptic notes, and you can plot any values to see if there are suspicious outliers (e.g. because someone wrote down a measurement in centimetres when they were meant to use metres). When transcribing or capturing data into a spreadsheet or database it is often best to use data validation tricks like drop-down menus, conditional formatting, restricted value ranges etc to avoid spelling mistakes and highlight data entries that are outside the expected range of the data field. It may seem like a lot of effort to set this up, but it’ll save you a lot of time and pain in the long run!!! Increasingly, I’ve started moving towards capturing data directly into a spreadsheet with data validation rules using a phone or tablet. There are also a number of “no code” app builders these days like AppSheet that allows you to easily collect data on your phone and sync data directly into Google Sheets and photos to your Google Drive. AppSheet is proprietary software, but does allow a lot of utility with their free accounts. QField is another handy open source app built on QGIS, allowing you to setup maps and forms in QGIS on your workstation and deploy them to your phone, tablet etc. It seems to be getting better all the time. Figure 5.5: An example data collection app I built in AppSheet that allows you to log GPS coordinates, take photos, record various fields, etc. Tidy Data Last, but not least. We haven’t discussed different data formats etc, but if you are working with tabular data (i.e. spreadsheets, tables) I strongly recommend you read this short paper on how to keep your data Tidy (Wickham 2014). Following these principles will make life much easier for you once you get to the analysis step… 5.2.3 Describe There are few things worse than having a spreadsheet of what you think is the data you need, but you don’t know what the column names mean, how variables were measured, what units they’re reported in, etc… - Especially when you were the one who collected and captured the data!!! This descriptive data about the data is called metadata and is essential for making the data reusable, but is also useful for many other purposes like making the data findable (e.g. using keyword searches). In fact, metadata makes up the majority of what are called the FAIR data principles (Wilkinson et al. 2016), which largely focus on this and the next few steps of the Data Life Cycle. I’m not going to dwell on them other than to say that they are a key component of making your work reproducible, and that like reproducibility, practicing FAIR data principles is a spectrum. Figure 5.6: The FAIR data principles ErrantScience.com. Some key kinds of metadata: the study context why the data were generated who funded, created, collected, assured, managed and owns the data (not always the same person) contact details for the above when and where the data were collected where the data are stored the data format what is the file format what softwares were used (and what version) the data content what was measured how it was measured what the columns and rows are what units it’s reported in what QA/QC has been applied is it raw data or a derived data product (e.g. spatially interpolated climate layers) if derived, how it was analyzed etc Metadata standards and interoperability Many data user communities have developed particular metadata standards or schemas in an attempt to enable the best possible description and interoperability of a data type for their needs. They are typically human and machine-readable data, so that the metadata records can also be read by machines, to facilitate storing and querying multiple datasets in a common database (or across databases). Imagine how difficult it would be to pay for something electronically if banks didn’t use common metadata standards? Each transaction would require someone to manually look things up in multiple tables etc etc. Chaos!!! Figure 5.7: How standards proliferate… from xkcd.com/927, used under a CC-BY-NC 2.5 license. Using common metadata schemas has many advantages in that they make data sharing easier, they allow you to search and integrate data across datasets, and they simplify metadata capture (i.e. having a list of required fields makes it easier to not forget any). There are many standards, but perhaps the most common ones you’ll encounter in biological sciences (other than geospatial metadata standards) are DarwinCore and Ecological Metadata Language (EML). There’s even new standards for documenting ecological forecasts! Figure 5.8: An example of a geospatial metadata standard. SpatioTemporal Asset Catalogs (STAC; stacspec.org) aims to provide a common specification to enable online search and discovery of geospatial assets in just about any format. 5.2.4 Preserve There are two major components to preserving your data: Back your data up now!!! (and repeat regularly) Losing your data can be incredibly inconvenient!!! A good friend of mine lost all of his PhD data twice. It took him 7 years to complete the degree… Beyond inconvenience, losing data can be incredibly expensive! Doing 4 extra years to get your PhD is expensive at a personal level, but if the data are part of a big project it can rapidly add up to millions - like How Toy Story 2 Almost Got Deleted. PRO TIP: Storing data on the cloud is not enough! You could easily delete that single version of all your data! You may also lose access when you change institution etc. E.g. What happens to your UCT MS OneDrive and Google Drive content when you graduate and ICTS close your email account? Long-term preservation and publication This involves the deposition of your data (and metadata!) in a data repository where it can be managed and curated over the long term. This is increasingly a requirement of funders and publishers (i.e. journals). Many journals allow you (or require you) to submit and publish your data with them as supplementary material. Unfortunately, many journals differ in how they curate the data and whether they are available open access. I prefer to publish my data in an online open access repository where you can get a permanent Digital Object Identifier (DOI) that you can link to from your paper. Another consideration, if you are keen for people to reuse your data (which if you are not you will fail this course by default) is where people are most likely to look for your data (i.e. making your data “Findable/Discoverable”). There are many “bespoke” discipline-specific data repositories for different kinds of data, e.g. Global databases: GenBank - for molecular data TRY - for plant traits Dryad - for generalist biological and environmental research South African databases: SANBI - for most kinds of South African biodiversity data SAEON - for South African environmental data (e.g. hydrology, meteorology, etc) and biodiversity data that don’t fit SANBI’s databases If none of these suit your data, there are also “generalist” data repositories that accept almost any kind of data, like: FigShare Zenodo UCT’s ZivaHub (which is built on and searchable through FigShare) I haven’t discussed physical samples at all. These are obviously a huge (if not bigger) challenge too, although there are some obvious homes for common biological data, like herbaria for plant collections and museums for animal specimens. 5.2.5 Discover This is perhaps the main point of the Data Life Cycle and FAIR data principles - to make data findable so that it can be reused. The biggest challenge to discovering data is that so many datasets are not online and are in the “filing cabinet in a bath in the basement under a leaking pipe” as in Figure 5.6. If you preserve and publish them in an online data repository, this overcomes the biggest hurdle. The next biggest challenge is that there is so much online that finding what you need can be quite challenging (like looking for a needle in a haystack…). This is where choosing the right portal can be important. It is also what metadata standards are aimed at - allowing interoperable searches for specific data types across multiple repositories. A final consideration is whether you have permission to use the data. You can often find out about the existence of a dataset, either online or in a paper, but the data aren’t made freely available. This is where licensing comes into play. Most data repositories require you to publish the data under a license. There are many options depending on the kind of data and what restrictions you want to put on its use. I’m not going to go into the gory details, but Creative Commons have created an extensible system of generic licenses that are easy to interpret and cover most situations. I say extensible because the licenses are made up of a string of components that can be layered over each other. For example: CCO - means it is Open - i.e. there are no restrictions on use and it is in the public domain CC BY - means by attribution - you can use the data for any purpose, but only if you indicate attribution of the data to the source or owner of the data CC BY-SA - means by attribution + share alike - i.e. you have to indicate attribution and share your derived product under the same license CC BY-ND - means by attribution + no derivatives - i.e. you have to indicate attribution, but cannot use it to make a derived product. This is often used for images - allowing you to show the image, but not to alter it. CC BY-NC - means by attribution + non-commercial - you have to indicate attribution, but cannot use it for commercial purposes (i.e. you can’t sell derived products) CC BY-NC-SA - by attribution + non-commercial + share alike CC BY-NC-ND - by attribution + non-commercial + no derivatives NOTE: As an aside, for some reason software licenses are a bit more complicated and code is rarely shared under CC licenses, other than CCO. A rough equivalent of CC BY for code is MIT, and there are others that can add various constraints similar to Creative Commons’ SA, ND and NC. See here. 5.2.6 Integrate There are a few different components to data integration in this context: Linking different kinds of data, usually through spatial and or temporal information e.g. matching you biodiversity collections with weather records or GIS information about the sites Keeping track of changes you’ve made to your data as you prepare it for analyses (versioning) e.g. you may be wanting to compare species richness across sites. This requires estimating species richness from your field data (usually lists of species by site occurrences and/or abundances) you should always keep a copy of your raw data!!! using scripting languages for data handling and analyses (e.g. R, Python, MatLab) can help you keep record of how you did any data summaries, transformations, etc, but only if you write clean, well-documented code and manage your code well!!! Curating your data such that they can easily be integrated with other, similar datasets for larger analyses or meta-analyses this is largely a metadata game, but also one of data formats etc. Many fields promote the use of common data standards with rules on measurement specifications, file formats, common data and metadata fields, controlled vocabularies etc that allow easy integration, searching and manipulation (see section 5.2.3 for more details). This is what a lot of the discipline-specific online databases attempt to achieve. 5.2.7 Analyze “The fun bit,” but again, there are many things to bear in mind and keep track of so that your analysis is repeatable. This is largely covered by the sections on Coding and code management and Computing environment and software in Chapter 4 5.3 Data and decisions This is not part of The Data Life Cycle per se, but it’s worth remembering that there are some other aspects of data, while still important if the goal is purely academic, that are make-or-break when the goal is informing decisions, e.g. (mostly paraphrased from Dietze et al. (2018)): Latency - the time between data collection and it’s availability for modelling. Depending on the model’s need for the latest data, if the latency is too long then it can preclude the ability to make useful forecasts (e.g. it’s very difficult to make useful weekly forecasts if you only get new data once a year…). Uncertainty - the model can only ever be as good as the data (GIGO: garbage in = garbage out). We’ll also see that assimilating data into forecasts requires uncertainty estimates. Not including uncertainty can create bias or overconfident predictions… Unfortunately, very rarely does anyone report the uncertainty in their data… Unfortunately, there are also many reasons why data can never be certain - sampling variability, random and systematic instrument errors, calibration uncertainty, classification errors (e.g. species identification), transcription errors, corrupt files (or collaborators!) etc. I live by the creed there is nothing as sinister as a certainty. If you tell me your model has an \\(R^2\\) of 1, I will tell you (with 100% certainty, ironically) that your model is wrong. Repeated sampling - most forecasts are in time and thus require time-series to develop the models. Frequent repeated sampling can often come at a trade-off with the spatial extent (or spatial replication) of sampling though. Forecasters need to optimize this trade-off to inform the most efficient data collection while also reducing uncertainty in the model. Interoperability - this is largely covered under the Describe, Preserve, Discover and Integrate steps in The Data Life Cycle References "],["tidy-data.html", "6 Tidy Data 6.1 Data entry 6.2 Tidy data and data wrangling 6.3 The dataset 6.4 Reading data", " 6 Tidy Data This section is a demonstration of some of the Tidyverse tools for wrangling and tidying your data, but first you need to get your data into a digital format… 6.1 Data entry Before we start, I should highlight that one very good way of reducing errors in data entry and improving quality assurance and quality control (QA/QC) is to make use of various forms of data validation like drop down lists and conditional formatting. These can be used to limit data types (i.e. avoids you entering text into a numeric column or vice versa), or limiting the range of values entered (e.g. 0 to 100 for percentages), or just highlighting values that are possible, but rare, and should be double-checked, like 100m tall trees. Unit errors are incredibly common in ecological data entry, especially for things like plant height where you may be measuring 20cm tall grasses and 20m tall trees!!! Drop down lists really come into their own when you’re working with lots of different Latin species names etc. Typos, spelling errors and synonyms can take weeks of work to fix! Restricting the names to a drop-down list from a known published taxonomic resource really makes a huge difference! Here’s an example from a vegetation plot survey I ran. If you go to the PlotTemplate sheet, you’ll see that the first two columns Plot_Quadrat and AcceptedSpecies are drop-down lists that reference the SiteData and AcceptedSpecies spreadsheets respectively. These prevent you from entering species data without having collected the site data first (it’s easy to forget if you’re doing lots of sites) and then limits the names you can use in turn. I’m not going to go into how to do data validation in spreadsheets, but here are links for: Microsoft Excel Google Sheets I’m sure there are plenty of other online resources too. 6.2 Tidy data and data wrangling As you know from the readings for the course, there are many reasons why you should keep your data in tidy format (Wickham 2014). Unfortunately, as my spreadsheet above demonstrates, it’s not always convenient to enter your data in tidy format, so you inevitably end out needing to do post-entry data formatting. A major problem here is that doing the reformatting manually creates opportunities for introducing errors. This is where it’s a major advantage if you know how to wrangle your data in a coding language like R or Python. This is not to say that coded data wrangling cannot introduce errors!!! You should always do sanity checks!!! But I’d suspect that most of the errors you can make with code will be very obvious, because the outcome is usually spectacularly different to the input. The rest of this section provides a demonstration of some of the functionality of the tidyverse set of R packages, and some of the more common data wrangling errors made in R. 6.3 The dataset This tutorial relies on data provided as supplementary material for the paper Slingsby et al. 2017. Intensifying postfire weather and biological invasion drive species loss in a Mediterranean-type biodiversity hotspot. Proceedings of the National Academy of Sciences. http://dx.doi.org/10.1073/pnas.1619014114. The data can be downloaded as one ~13MB MicroSoft Excel (.xlsx) file here. We’re also going to use the same dataset, but as a set of comma separated value (.csv) text files, that you can download and unzip from here. 6.4 Reading data R has a number of different packages to read in data, and there’s even a few that work with different tabular data types just within the tidyverse. These include: readr for text files readxl for Microsoft Excel files (.xls or .xlsx) googlesheets4 for reading data directly from a Google Sheet There’s others too that can scrape data from web pages, interact with web APIs or directly with local or online databases. Fortunately, within the tidyverse similar syntax can be used across most packages. Check out the cheat sheet. Let’s start with readr: References "],["references.html", "References", " References "],["applications.html", "7 Applications 7.1 Example one 7.2 Example two", " 7 Applications Some significant applications are demonstrated in this chapter. 7.1 Example one 7.2 Example two "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
